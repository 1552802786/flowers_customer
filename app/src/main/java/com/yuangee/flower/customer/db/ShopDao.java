package com.yuangee.flower.customer.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yuangee.flower.customer.entity.Shop;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHOP".
*/
public class ShopDao extends AbstractDao<Shop, Long> {

    public static final String TABLENAME = "SHOP";

    /**
     * Properties of entity Shop.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Address = new Property(1, String.class, "address", false, "ADDRESS");
        public final static Property SimpleShopName = new Property(2, String.class, "simpleShopName", false, "SIMPLE_SHOP_NAME");
        public final static Property ShopName = new Property(3, String.class, "shopName", false, "SHOP_NAME");
        public final static Property MemberId = new Property(4, Long.class, "memberId", false, "MEMBER_ID");
        public final static Property Money = new Property(5, Double.class, "money", false, "MONEY");
        public final static Property Status = new Property(6, Integer.class, "status", false, "STATUS");
        public final static Property IdCardNo = new Property(7, String.class, "idCardNo", false, "ID_CARD_NO");
        public final static Property IdImgBack = new Property(8, String.class, "idImgBack", false, "ID_IMG_BACK");
        public final static Property Photo = new Property(9, String.class, "photo", false, "PHOTO");
        public final static Property IdImgFront = new Property(10, String.class, "idImgFront", false, "ID_IMG_FRONT");
        public final static Property BusinessLicence = new Property(11, String.class, "businessLicence", false, "BUSINESS_LICENCE");
        public final static Property Scene1 = new Property(12, String.class, "scene1", false, "SCENE1");
        public final static Property Scene2 = new Property(13, String.class, "scene2", false, "SCENE2");
        public final static Property Description = new Property(14, String.class, "description", false, "DESCRIPTION");
        public final static Property Phone = new Property(15, String.class, "phone", false, "PHONE");
        public final static Property Name = new Property(16, String.class, "name", false, "NAME");
        public final static Property BankNo = new Property(17, String.class, "bankNo", false, "BANK_NO");
        public final static Property BankName = new Property(18, String.class, "bankName", false, "BANK_NAME");
        public final static Property OpenAccountName = new Property(19, String.class, "openAccountName", false, "OPEN_ACCOUNT_NAME");
        public final static Property BusinessLicenceNo = new Property(20, String.class, "businessLicenceNo", false, "BUSINESS_LICENCE_NO");
    }


    public ShopDao(DaoConfig config) {
        super(config);
    }
    
    public ShopDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHOP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"ADDRESS\" TEXT," + // 1: address
                "\"SIMPLE_SHOP_NAME\" TEXT," + // 2: simpleShopName
                "\"SHOP_NAME\" TEXT," + // 3: shopName
                "\"MEMBER_ID\" INTEGER," + // 4: memberId
                "\"MONEY\" REAL," + // 5: money
                "\"STATUS\" INTEGER," + // 6: status
                "\"ID_CARD_NO\" TEXT," + // 7: idCardNo
                "\"ID_IMG_BACK\" TEXT," + // 8: idImgBack
                "\"PHOTO\" TEXT," + // 9: photo
                "\"ID_IMG_FRONT\" TEXT," + // 10: idImgFront
                "\"BUSINESS_LICENCE\" TEXT," + // 11: businessLicence
                "\"SCENE1\" TEXT," + // 12: scene1
                "\"SCENE2\" TEXT," + // 13: scene2
                "\"DESCRIPTION\" TEXT," + // 14: description
                "\"PHONE\" TEXT," + // 15: phone
                "\"NAME\" TEXT," + // 16: name
                "\"BANK_NO\" TEXT," + // 17: bankNo
                "\"BANK_NAME\" TEXT," + // 18: bankName
                "\"OPEN_ACCOUNT_NAME\" TEXT," + // 19: openAccountName
                "\"BUSINESS_LICENCE_NO\" TEXT);"); // 20: businessLicenceNo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHOP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Shop entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(2, address);
        }
 
        String simpleShopName = entity.getSimpleShopName();
        if (simpleShopName != null) {
            stmt.bindString(3, simpleShopName);
        }
 
        String shopName = entity.getShopName();
        if (shopName != null) {
            stmt.bindString(4, shopName);
        }
 
        Long memberId = entity.getMemberId();
        if (memberId != null) {
            stmt.bindLong(5, memberId);
        }
 
        Double money = entity.getMoney();
        if (money != null) {
            stmt.bindDouble(6, money);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(7, status);
        }
 
        String idCardNo = entity.getIdCardNo();
        if (idCardNo != null) {
            stmt.bindString(8, idCardNo);
        }
 
        String idImgBack = entity.getIdImgBack();
        if (idImgBack != null) {
            stmt.bindString(9, idImgBack);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(10, photo);
        }
 
        String idImgFront = entity.getIdImgFront();
        if (idImgFront != null) {
            stmt.bindString(11, idImgFront);
        }
 
        String businessLicence = entity.getBusinessLicence();
        if (businessLicence != null) {
            stmt.bindString(12, businessLicence);
        }
 
        String scene1 = entity.getScene1();
        if (scene1 != null) {
            stmt.bindString(13, scene1);
        }
 
        String scene2 = entity.getScene2();
        if (scene2 != null) {
            stmt.bindString(14, scene2);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(15, description);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(16, phone);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(17, name);
        }
 
        String bankNo = entity.getBankNo();
        if (bankNo != null) {
            stmt.bindString(18, bankNo);
        }
 
        String bankName = entity.getBankName();
        if (bankName != null) {
            stmt.bindString(19, bankName);
        }
 
        String openAccountName = entity.getOpenAccountName();
        if (openAccountName != null) {
            stmt.bindString(20, openAccountName);
        }
 
        String businessLicenceNo = entity.getBusinessLicenceNo();
        if (businessLicenceNo != null) {
            stmt.bindString(21, businessLicenceNo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Shop entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(2, address);
        }
 
        String simpleShopName = entity.getSimpleShopName();
        if (simpleShopName != null) {
            stmt.bindString(3, simpleShopName);
        }
 
        String shopName = entity.getShopName();
        if (shopName != null) {
            stmt.bindString(4, shopName);
        }
 
        Long memberId = entity.getMemberId();
        if (memberId != null) {
            stmt.bindLong(5, memberId);
        }
 
        Double money = entity.getMoney();
        if (money != null) {
            stmt.bindDouble(6, money);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(7, status);
        }
 
        String idCardNo = entity.getIdCardNo();
        if (idCardNo != null) {
            stmt.bindString(8, idCardNo);
        }
 
        String idImgBack = entity.getIdImgBack();
        if (idImgBack != null) {
            stmt.bindString(9, idImgBack);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(10, photo);
        }
 
        String idImgFront = entity.getIdImgFront();
        if (idImgFront != null) {
            stmt.bindString(11, idImgFront);
        }
 
        String businessLicence = entity.getBusinessLicence();
        if (businessLicence != null) {
            stmt.bindString(12, businessLicence);
        }
 
        String scene1 = entity.getScene1();
        if (scene1 != null) {
            stmt.bindString(13, scene1);
        }
 
        String scene2 = entity.getScene2();
        if (scene2 != null) {
            stmt.bindString(14, scene2);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(15, description);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(16, phone);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(17, name);
        }
 
        String bankNo = entity.getBankNo();
        if (bankNo != null) {
            stmt.bindString(18, bankNo);
        }
 
        String bankName = entity.getBankName();
        if (bankName != null) {
            stmt.bindString(19, bankName);
        }
 
        String openAccountName = entity.getOpenAccountName();
        if (openAccountName != null) {
            stmt.bindString(20, openAccountName);
        }
 
        String businessLicenceNo = entity.getBusinessLicenceNo();
        if (businessLicenceNo != null) {
            stmt.bindString(21, businessLicenceNo);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Shop readEntity(Cursor cursor, int offset) {
        Shop entity = new Shop( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // address
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // simpleShopName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // shopName
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // memberId
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // money
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // status
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // idCardNo
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // idImgBack
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // photo
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // idImgFront
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // businessLicence
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // scene1
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // scene2
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // description
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // phone
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // name
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // bankNo
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // bankName
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // openAccountName
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // businessLicenceNo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Shop entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setAddress(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSimpleShopName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShopName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMemberId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setMoney(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setStatus(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setIdCardNo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIdImgBack(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPhoto(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIdImgFront(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBusinessLicence(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setScene1(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setScene2(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDescription(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPhone(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setBankNo(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setBankName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setOpenAccountName(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setBusinessLicenceNo(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Shop entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Shop entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Shop entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
