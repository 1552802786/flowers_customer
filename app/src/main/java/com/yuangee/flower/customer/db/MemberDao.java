package com.yuangee.flower.customer.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yuangee.flower.customer.entity.Member;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEMBER".
*/
public class MemberDao extends AbstractDao<Member, Long> {

    public static final String TABLENAME = "MEMBER";

    /**
     * Properties of entity Member.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property PassWord = new Property(3, String.class, "passWord", false, "PASS_WORD");
        public final static Property Phone = new Property(4, String.class, "phone", false, "PHONE");
        public final static Property Email = new Property(5, String.class, "email", false, "EMAIL");
        public final static Property Photo = new Property(6, String.class, "photo", false, "PHOTO");
        public final static Property Gender = new Property(7, boolean.class, "gender", false, "GENDER");
        public final static Property Address = new Property(8, String.class, "address", false, "ADDRESS");
        public final static Property Type = new Property(9, String.class, "type", false, "TYPE");
        public final static Property InBlacklist = new Property(10, boolean.class, "inBlacklist", false, "IN_BLACKLIST");
        public final static Property IsRecycle = new Property(11, boolean.class, "isRecycle", false, "IS_RECYCLE");
        public final static Property InFirst = new Property(12, boolean.class, "inFirst", false, "IN_FIRST");
        public final static Property Balance = new Property(13, double.class, "balance", false, "BALANCE");
        public final static Property CustomServicePhone = new Property(14, String.class, "customServicePhone", false, "CUSTOM_SERVICE_PHONE");
    }


    public MemberDao(DaoConfig config) {
        super(config);
    }
    
    public MemberDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEMBER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"USER_NAME\" TEXT," + // 2: userName
                "\"PASS_WORD\" TEXT," + // 3: passWord
                "\"PHONE\" TEXT," + // 4: phone
                "\"EMAIL\" TEXT," + // 5: email
                "\"PHOTO\" TEXT," + // 6: photo
                "\"GENDER\" INTEGER NOT NULL ," + // 7: gender
                "\"ADDRESS\" TEXT," + // 8: address
                "\"TYPE\" TEXT," + // 9: type
                "\"IN_BLACKLIST\" INTEGER NOT NULL ," + // 10: inBlacklist
                "\"IS_RECYCLE\" INTEGER NOT NULL ," + // 11: isRecycle
                "\"IN_FIRST\" INTEGER NOT NULL ," + // 12: inFirst
                "\"BALANCE\" REAL NOT NULL ," + // 13: balance
                "\"CUSTOM_SERVICE_PHONE\" TEXT);"); // 14: customServicePhone
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEMBER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Member entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String passWord = entity.getPassWord();
        if (passWord != null) {
            stmt.bindString(4, passWord);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(5, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(6, email);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(7, photo);
        }
        stmt.bindLong(8, entity.getGender() ? 1L: 0L);
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(9, address);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(10, type);
        }
        stmt.bindLong(11, entity.getInBlacklist() ? 1L: 0L);
        stmt.bindLong(12, entity.getIsRecycle() ? 1L: 0L);
        stmt.bindLong(13, entity.getInFirst() ? 1L: 0L);
        stmt.bindDouble(14, entity.getBalance());
 
        String customServicePhone = entity.getCustomServicePhone();
        if (customServicePhone != null) {
            stmt.bindString(15, customServicePhone);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Member entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String passWord = entity.getPassWord();
        if (passWord != null) {
            stmt.bindString(4, passWord);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(5, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(6, email);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(7, photo);
        }
        stmt.bindLong(8, entity.getGender() ? 1L: 0L);
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(9, address);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(10, type);
        }
        stmt.bindLong(11, entity.getInBlacklist() ? 1L: 0L);
        stmt.bindLong(12, entity.getIsRecycle() ? 1L: 0L);
        stmt.bindLong(13, entity.getInFirst() ? 1L: 0L);
        stmt.bindDouble(14, entity.getBalance());
 
        String customServicePhone = entity.getCustomServicePhone();
        if (customServicePhone != null) {
            stmt.bindString(15, customServicePhone);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Member readEntity(Cursor cursor, int offset) {
        Member entity = new Member( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // passWord
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // phone
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // email
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // photo
            cursor.getShort(offset + 7) != 0, // gender
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // address
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // type
            cursor.getShort(offset + 10) != 0, // inBlacklist
            cursor.getShort(offset + 11) != 0, // isRecycle
            cursor.getShort(offset + 12) != 0, // inFirst
            cursor.getDouble(offset + 13), // balance
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // customServicePhone
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Member entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPassWord(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPhone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEmail(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhoto(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGender(cursor.getShort(offset + 7) != 0);
        entity.setAddress(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setInBlacklist(cursor.getShort(offset + 10) != 0);
        entity.setIsRecycle(cursor.getShort(offset + 11) != 0);
        entity.setInFirst(cursor.getShort(offset + 12) != 0);
        entity.setBalance(cursor.getDouble(offset + 13));
        entity.setCustomServicePhone(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Member entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Member entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Member entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
