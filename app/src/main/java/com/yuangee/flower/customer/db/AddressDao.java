package com.yuangee.flower.customer.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yuangee.flower.customer.entity.Address;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADDRESS".
*/
public class AddressDao extends AbstractDao<Address, Long> {

    public static final String TABLENAME = "ADDRESS";

    /**
     * Properties of entity Address.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property ShippingId = new Property(1, long.class, "shippingId", false, "SHIPPING_ID");
        public final static Property ShippingName = new Property(2, String.class, "shippingName", false, "SHIPPING_NAME");
        public final static Property ShippingPhone = new Property(3, String.class, "shippingPhone", false, "SHIPPING_PHONE");
        public final static Property Pro = new Property(4, String.class, "pro", false, "PRO");
        public final static Property City = new Property(5, String.class, "city", false, "CITY");
        public final static Property Area = new Property(6, String.class, "area", false, "AREA");
        public final static Property Street = new Property(7, String.class, "street", false, "STREET");
        public final static Property DefaultAddress = new Property(8, boolean.class, "defaultAddress", false, "DEFAULT_ADDRESS");
    }


    public AddressDao(DaoConfig config) {
        super(config);
    }
    
    public AddressDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADDRESS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"SHIPPING_ID\" INTEGER NOT NULL ," + // 1: shippingId
                "\"SHIPPING_NAME\" TEXT," + // 2: shippingName
                "\"SHIPPING_PHONE\" TEXT," + // 3: shippingPhone
                "\"PRO\" TEXT," + // 4: pro
                "\"CITY\" TEXT," + // 5: city
                "\"AREA\" TEXT," + // 6: area
                "\"STREET\" TEXT," + // 7: street
                "\"DEFAULT_ADDRESS\" INTEGER NOT NULL );"); // 8: defaultAddress
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADDRESS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Address entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getShippingId());
 
        String shippingName = entity.getShippingName();
        if (shippingName != null) {
            stmt.bindString(3, shippingName);
        }
 
        String shippingPhone = entity.getShippingPhone();
        if (shippingPhone != null) {
            stmt.bindString(4, shippingPhone);
        }
 
        String pro = entity.getPro();
        if (pro != null) {
            stmt.bindString(5, pro);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(6, city);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(7, area);
        }
 
        String street = entity.getStreet();
        if (street != null) {
            stmt.bindString(8, street);
        }
        stmt.bindLong(9, entity.getDefaultAddress() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Address entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getShippingId());
 
        String shippingName = entity.getShippingName();
        if (shippingName != null) {
            stmt.bindString(3, shippingName);
        }
 
        String shippingPhone = entity.getShippingPhone();
        if (shippingPhone != null) {
            stmt.bindString(4, shippingPhone);
        }
 
        String pro = entity.getPro();
        if (pro != null) {
            stmt.bindString(5, pro);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(6, city);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(7, area);
        }
 
        String street = entity.getStreet();
        if (street != null) {
            stmt.bindString(8, street);
        }
        stmt.bindLong(9, entity.getDefaultAddress() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Address readEntity(Cursor cursor, int offset) {
        Address entity = new Address( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // shippingId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // shippingName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // shippingPhone
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pro
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // city
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // area
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // street
            cursor.getShort(offset + 8) != 0 // defaultAddress
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Address entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setShippingId(cursor.getLong(offset + 1));
        entity.setShippingName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShippingPhone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPro(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCity(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setArea(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStreet(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDefaultAddress(cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Address entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Address entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Address entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
