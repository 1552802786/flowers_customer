package com.yuangee.flower.customer.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yuangee.flower.customer.entity.Coupon;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COUPON".
*/
public class CouponDao extends AbstractDao<Coupon, Long> {

    public static final String TABLENAME = "COUPON";

    /**
     * Properties of entity Coupon.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Encoded = new Property(1, String.class, "encoded", false, "ENCODED");
        public final static Property Status = new Property(2, Integer.class, "status", false, "STATUS");
        public final static Property CouponRuleId = new Property(3, Long.class, "couponRuleId", false, "COUPON_RULE_ID");
        public final static Property Money = new Property(4, double.class, "money", false, "MONEY");
        public final static Property CouponFullMoney = new Property(5, double.class, "couponFullMoney", false, "COUPON_FULL_MONEY");
        public final static Property MemberId = new Property(6, Long.class, "memberId", false, "MEMBER_ID");
        public final static Property MemberName = new Property(7, String.class, "memberName", false, "MEMBER_NAME");
        public final static Property MemberPhone = new Property(8, String.class, "memberPhone", false, "MEMBER_PHONE");
        public final static Property BecomeDueTime = new Property(9, String.class, "becomeDueTime", false, "BECOME_DUE_TIME");
    }


    public CouponDao(DaoConfig config) {
        super(config);
    }
    
    public CouponDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COUPON\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ENCODED\" TEXT," + // 1: encoded
                "\"STATUS\" INTEGER," + // 2: status
                "\"COUPON_RULE_ID\" INTEGER," + // 3: couponRuleId
                "\"MONEY\" REAL NOT NULL ," + // 4: money
                "\"COUPON_FULL_MONEY\" REAL NOT NULL ," + // 5: couponFullMoney
                "\"MEMBER_ID\" INTEGER," + // 6: memberId
                "\"MEMBER_NAME\" TEXT," + // 7: memberName
                "\"MEMBER_PHONE\" TEXT," + // 8: memberPhone
                "\"BECOME_DUE_TIME\" TEXT);"); // 9: becomeDueTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COUPON\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Coupon entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String encoded = entity.getEncoded();
        if (encoded != null) {
            stmt.bindString(2, encoded);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(3, status);
        }
 
        Long couponRuleId = entity.getCouponRuleId();
        if (couponRuleId != null) {
            stmt.bindLong(4, couponRuleId);
        }
        stmt.bindDouble(5, entity.getMoney());
        stmt.bindDouble(6, entity.getCouponFullMoney());
 
        Long memberId = entity.getMemberId();
        if (memberId != null) {
            stmt.bindLong(7, memberId);
        }
 
        String memberName = entity.getMemberName();
        if (memberName != null) {
            stmt.bindString(8, memberName);
        }
 
        String memberPhone = entity.getMemberPhone();
        if (memberPhone != null) {
            stmt.bindString(9, memberPhone);
        }
 
        String becomeDueTime = entity.getBecomeDueTime();
        if (becomeDueTime != null) {
            stmt.bindString(10, becomeDueTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Coupon entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String encoded = entity.getEncoded();
        if (encoded != null) {
            stmt.bindString(2, encoded);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(3, status);
        }
 
        Long couponRuleId = entity.getCouponRuleId();
        if (couponRuleId != null) {
            stmt.bindLong(4, couponRuleId);
        }
        stmt.bindDouble(5, entity.getMoney());
        stmt.bindDouble(6, entity.getCouponFullMoney());
 
        Long memberId = entity.getMemberId();
        if (memberId != null) {
            stmt.bindLong(7, memberId);
        }
 
        String memberName = entity.getMemberName();
        if (memberName != null) {
            stmt.bindString(8, memberName);
        }
 
        String memberPhone = entity.getMemberPhone();
        if (memberPhone != null) {
            stmt.bindString(9, memberPhone);
        }
 
        String becomeDueTime = entity.getBecomeDueTime();
        if (becomeDueTime != null) {
            stmt.bindString(10, becomeDueTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Coupon readEntity(Cursor cursor, int offset) {
        Coupon entity = new Coupon( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // encoded
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // status
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // couponRuleId
            cursor.getDouble(offset + 4), // money
            cursor.getDouble(offset + 5), // couponFullMoney
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // memberId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // memberName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // memberPhone
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // becomeDueTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Coupon entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEncoded(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStatus(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setCouponRuleId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setMoney(cursor.getDouble(offset + 4));
        entity.setCouponFullMoney(cursor.getDouble(offset + 5));
        entity.setMemberId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setMemberName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMemberPhone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBecomeDueTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Coupon entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Coupon entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Coupon entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
