package com.yuangee.flower.customer.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.yuangee.flower.customer.entity.GenreSub;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GENRE_SUB".
*/
public class GenreSubDao extends AbstractDao<GenreSub, Long> {

    public static final String TABLENAME = "GENRE_SUB";

    /**
     * Properties of entity GenreSub.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property GenreId = new Property(1, long.class, "genreId", false, "GENRE_ID");
        public final static Property GenreName = new Property(2, String.class, "genreName", false, "GENRE_NAME");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property DepictName = new Property(4, String.class, "depictName", false, "DEPICT_NAME");
    }

    private Query<GenreSub> genre_GenreSubsQuery;

    public GenreSubDao(DaoConfig config) {
        super(config);
    }
    
    public GenreSubDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GENRE_SUB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"GENRE_ID\" INTEGER NOT NULL ," + // 1: genreId
                "\"GENRE_NAME\" TEXT," + // 2: genreName
                "\"NAME\" TEXT," + // 3: name
                "\"DEPICT_NAME\" TEXT);"); // 4: depictName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GENRE_SUB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GenreSub entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getGenreId());
 
        String genreName = entity.getGenreName();
        if (genreName != null) {
            stmt.bindString(3, genreName);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String depictName = entity.getDepictName();
        if (depictName != null) {
            stmt.bindString(5, depictName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GenreSub entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getGenreId());
 
        String genreName = entity.getGenreName();
        if (genreName != null) {
            stmt.bindString(3, genreName);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String depictName = entity.getDepictName();
        if (depictName != null) {
            stmt.bindString(5, depictName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public GenreSub readEntity(Cursor cursor, int offset) {
        GenreSub entity = new GenreSub( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // genreId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // genreName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // depictName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GenreSub entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setGenreId(cursor.getLong(offset + 1));
        entity.setGenreName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDepictName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GenreSub entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GenreSub entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GenreSub entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "genreSubs" to-many relationship of Genre. */
    public List<GenreSub> _queryGenre_GenreSubs(long genreId) {
        synchronized (this) {
            if (genre_GenreSubsQuery == null) {
                QueryBuilder<GenreSub> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.GenreId.eq(null));
                genre_GenreSubsQuery = queryBuilder.build();
            }
        }
        Query<GenreSub> query = genre_GenreSubsQuery.forCurrentThread();
        query.setParameter(0, genreId);
        return query.list();
    }

}
