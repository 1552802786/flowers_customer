package com.yuangee.flower.customer.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yuangee.flower.customer.entity.DestineTime;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DESTINE_TIME".
*/
public class DestineTimeDao extends AbstractDao<DestineTime, Long> {

    public static final String TABLENAME = "DESTINE_TIME";

    /**
     * Properties of entity DestineTime.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property EndDate = new Property(1, long.class, "endDate", false, "END_DATE");
        public final static Property Start = new Property(2, int.class, "start", false, "START");
        public final static Property End = new Property(3, int.class, "end", false, "END");
        public final static Property Value = new Property(4, boolean.class, "value", false, "VALUE");
        public final static Property StartDate = new Property(5, long.class, "startDate", false, "START_DATE");
    }


    public DestineTimeDao(DaoConfig config) {
        super(config);
    }
    
    public DestineTimeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DESTINE_TIME\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"END_DATE\" INTEGER NOT NULL ," + // 1: endDate
                "\"START\" INTEGER NOT NULL ," + // 2: start
                "\"END\" INTEGER NOT NULL ," + // 3: end
                "\"VALUE\" INTEGER NOT NULL ," + // 4: value
                "\"START_DATE\" INTEGER NOT NULL );"); // 5: startDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DESTINE_TIME\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DestineTime entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getEndDate());
        stmt.bindLong(3, entity.getStart());
        stmt.bindLong(4, entity.getEnd());
        stmt.bindLong(5, entity.getValue() ? 1L: 0L);
        stmt.bindLong(6, entity.getStartDate());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DestineTime entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getEndDate());
        stmt.bindLong(3, entity.getStart());
        stmt.bindLong(4, entity.getEnd());
        stmt.bindLong(5, entity.getValue() ? 1L: 0L);
        stmt.bindLong(6, entity.getStartDate());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public DestineTime readEntity(Cursor cursor, int offset) {
        DestineTime entity = new DestineTime( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // endDate
            cursor.getInt(offset + 2), // start
            cursor.getInt(offset + 3), // end
            cursor.getShort(offset + 4) != 0, // value
            cursor.getLong(offset + 5) // startDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DestineTime entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setEndDate(cursor.getLong(offset + 1));
        entity.setStart(cursor.getInt(offset + 2));
        entity.setEnd(cursor.getInt(offset + 3));
        entity.setValue(cursor.getShort(offset + 4) != 0);
        entity.setStartDate(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DestineTime entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DestineTime entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DestineTime entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
